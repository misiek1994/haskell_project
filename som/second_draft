import System.Random

numbers = [1, 3, 4]
vec = [1, 1, 0]
list_of_lists = [[1, 3, 4], [1, 3, 5], [1, 1, 3], [2, 3, 4]]
list_of_lists_of_lists = [[[1, 3, 4], [1, 3, 5], [1, 1, 3], [2, 3, 4]], 
                          [[1, 3, 4], [1, 3, 5], [1, 1, 2], [2, 3, 5]]]

map_length = 10
map_height = 10
single_vec_size = 3
                          
distance :: [Integer] -> [Integer] -> Integer                          
distance [] [] = 0
distance a b = (head a - head b)^2 + (distance (tail a) (tail b))

newtype Point x y val = Point (Integer, Integer, Integer)  deriving (Eq,Show)
instance (Num x, Num y, Num val)  => Num (Point x y val) where
   Point (x1,y1,val1) + Point (x2,y2,val2) = Point ((mod (x1+x2) map_length), (mod (y1+y2) map_height) ,val1+val2)
instance (Ord x, Ord y, Ord val) => Ord (Point x y val) where
   Point (x1,y1,val1) < Point (x2,y2,val2) = val1<val2   

min_distance_in_row a [] = Point (-1, -1, 1000000000000000)
min_distance_in_row a [b] = Point (0, 0, distance a b)
min_distance_in_row a b | ((min_distance_in_row a [head b]) < (min_distance_in_row a (tail b))) = min_distance_in_row a [head b]
                           | otherwise = (Point (1, 0, 0) + (min_distance_in_row a (tail b)))
                           
min_distance a [] = Point (-1, -1, 1000000000000000)
min_distance a [b] = min_distance_in_row a b
min_distance a b | ((min_distance a [head b]) < (min_distance a (tail b))) = min_distance a [head b]
                 | otherwise = (Point (0, 1, 0) + (min_distance a (tail b)))

--get_random gen = take 1 (randoms gen :: [Double])

random_vec :: Int -> IO([Double])
random_vec 0 = return []
random_vec n = do
    r <- randomRIO (1,10) :: IO Double
    rs <- random_vec (n-1)
    return (r:rs) 

random_row :: Int -> Int -> IO([[Double]])
random_row 0 _ = return []
random_row n vec_size = do
    r <- random_vec vec_size
    rs <- random_row (n-1) vec_size
    return (r:rs) 
    
random_map :: Int -> Int -> Int -> IO([[[Double]]])
random_map 0 _ _ = return []
random_map n m vec_size = do
    r <- random_row m vec_size
    rs <- random_map (n-1) m vec_size
    return (r:rs) 
    
    
    
    
    
get_random = do
    g <- getStdGen
    --randomIO :: IO Float
    print $ take 10 (randoms g :: [Double])
    -- print $ take 10 (randomRs (1, 10) g :: [Double])
